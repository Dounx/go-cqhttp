// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIClient interface {
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#get_login_info-%E8%8E%B7%E5%8F%96%E7%99%BB%E5%BD%95%E5%8F%B7%E4%BF%A1%E6%81%AF
	GetLoginInfo(ctx context.Context, in *GetLoginInfoRequest, opts ...grpc.CallOption) (*GetLoginInfoResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#get_friend_list-%E8%8E%B7%E5%8F%96%E5%A5%BD%E5%8F%8B%E5%88%97%E8%A1%A8
	GetFriendList(ctx context.Context, in *GetFriendListRequest, opts ...grpc.CallOption) (*GetFriendListResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#get_group_list-%E8%8E%B7%E5%8F%96%E7%BE%A4%E5%88%97%E8%A1%A8
	GetGroupList(ctx context.Context, in *GetGroupListRequest, opts ...grpc.CallOption) (*GetGroupListResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#get_group_info-%E8%8E%B7%E5%8F%96%E7%BE%A4%E4%BF%A1%E6%81%AF
	GetGroupInfo(ctx context.Context, in *GetGroupInfoRequest, opts ...grpc.CallOption) (*GetGroupInfoResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#get_group_member_list-%E8%8E%B7%E5%8F%96%E7%BE%A4%E6%88%90%E5%91%98%E5%88%97%E8%A1%A8
	GetGroupMemberList(ctx context.Context, in *GetGroupMemberListRequest, opts ...grpc.CallOption) (*GetGroupMemberListResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#get_group_member_info-%E8%8E%B7%E5%8F%96%E7%BE%A4%E6%88%90%E5%91%98%E4%BF%A1%E6%81%AF
	GetGroupMemberInfo(ctx context.Context, in *GetGroupMemberInfoRequest, opts ...grpc.CallOption) (*GetGroupMemberInfoResponse, error)
	// https://github.com/Mrs4s/go-cqhttp/blob/master/docs/cqhttp.md#%E8%8E%B7%E5%8F%96%E7%BE%A4%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF
	GetGroupFileSystemInfo(ctx context.Context, in *GetGroupFileSystemInfoRequest, opts ...grpc.CallOption) (*GetGroupFileSystemInfoResponse, error)
	// https://github.com/Mrs4s/go-cqhttp/blob/master/docs/cqhttp.md#%E8%8E%B7%E5%8F%96%E7%BE%A4%E6%A0%B9%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6%E5%88%97%E8%A1%A8
	GetGroupRootFiles(ctx context.Context, in *GetGroupRootFilesRequest, opts ...grpc.CallOption) (*GetGroupRootFilesResponse, error)
	// https://github.com/Mrs4s/go-cqhttp/blob/master/docs/cqhttp.md#%E8%8E%B7%E5%8F%96%E7%BE%A4%E5%AD%90%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6%E5%88%97%E8%A1%A8
	GetGroupFilesByFolder(ctx context.Context, in *GetGroupFilesByFolderRequest, opts ...grpc.CallOption) (*GetGroupFilesByFolderResponse, error)
	// https://github.com/Mrs4s/go-cqhttp/blob/master/docs/cqhttp.md#%E8%8E%B7%E5%8F%96%E7%BE%A4%E6%96%87%E4%BB%B6%E8%B5%84%E6%BA%90%E9%93%BE%E6%8E%A5
	GetGroupFileUrl(ctx context.Context, in *GetGroupFileUrlRequest, opts ...grpc.CallOption) (*GetGroupFileUrlResponse, error)
	// https://github.com/Mrs4s/go-cqhttp/blob/master/docs/cqhttp.md#%E8%8E%B7%E5%8F%96%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D
	GetWordSlices(ctx context.Context, in *GetWordSlicesRequest, opts ...grpc.CallOption) (*GetWordSlicesResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#send_group_msg-%E5%8F%91%E9%80%81%E7%BE%A4%E6%B6%88%E6%81%AF
	SendGroupMessage(ctx context.Context, in *SendGroupMessageRequest, opts ...grpc.CallOption) (*SendGroupMessageResponse, error)
	// https://github.com/Mrs4s/go-cqhttp/blob/master/docs/cqhttp.md#%E5%8F%91%E9%80%81%E5%90%88%E5%B9%B6%E8%BD%AC%E5%8F%91%E7%BE%A4
	SendGroupForwardMessage(ctx context.Context, in *SendGroupForwardMessageRequest, opts ...grpc.CallOption) (*SendGroupForwardMessageResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#send_private_msg-%E5%8F%91%E9%80%81%E7%A7%81%E8%81%8A%E6%B6%88%E6%81%AF
	SendPrivateMessage(ctx context.Context, in *SendPrivateMessageRequest, opts ...grpc.CallOption) (*SendPrivateMessageResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#set_group_card-%E8%AE%BE%E7%BD%AE%E7%BE%A4%E5%90%8D%E7%89%87%E7%BE%A4%E5%A4%87%E6%B3%A8
	SetGroupCard(ctx context.Context, in *SetGroupCardRequest, opts ...grpc.CallOption) (*SetGroupCardResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#set_group_special_title-%E8%AE%BE%E7%BD%AE%E7%BE%A4%E7%BB%84%E4%B8%93%E5%B1%9E%E5%A4%B4%E8%A1%94
	SetGroupSpecialTitle(ctx context.Context, in *SetGroupSpecialTitleRequest, opts ...grpc.CallOption) (*SetGroupSpecialTitleResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#set_group_name-%E8%AE%BE%E7%BD%AE%E7%BE%A4%E5%90%8D
	SetGroupName(ctx context.Context, in *SetGroupNameRequest, opts ...grpc.CallOption) (*SetGroupNameResponse, error)
	// https://github.com/Mrs4s/go-cqhttp/blob/master/docs/cqhttp.md#%E5%8F%91%E9%80%81%E7%BE%A4%E5%85%AC%E5%91%8A
	SetGroupNotice(ctx context.Context, in *SetGroupNoticeRequest, opts ...grpc.CallOption) (*SetGroupNoticeResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#set_group_kick-%E7%BE%A4%E7%BB%84%E8%B8%A2%E4%BA%BA
	SetGroupKick(ctx context.Context, in *SetGroupKickRequest, opts ...grpc.CallOption) (*SetGroupKickResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#set_group_ban-%E7%BE%A4%E7%BB%84%E5%8D%95%E4%BA%BA%E7%A6%81%E8%A8%80
	SetGroupBan(ctx context.Context, in *SetGroupBanRequest, opts ...grpc.CallOption) (*SetGroupBanResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#set_group_whole_ban-%E7%BE%A4%E7%BB%84%E5%85%A8%E5%91%98%E7%A6%81%E8%A8%80
	SetGroupWholeBan(ctx context.Context, in *SetGroupWholeBanRequest, opts ...grpc.CallOption) (*SetGroupWholeBanResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#set_group_leave-%E9%80%80%E5%87%BA%E7%BE%A4%E7%BB%84
	SetGroupLeave(ctx context.Context, in *SetGroupLeaveRequest, opts ...grpc.CallOption) (*SetGroupLeaveResponse, error)
	// https://github.com/Mrs4s/go-cqhttp/blob/master/docs/cqhttp.md#%E8%8E%B7%E5%8F%96%E7%BE%A4%E5%85%A8%E4%BD%93%E6%88%90%E5%91%98%E5%89%A9%E4%BD%99%E6%AC%A1%E6%95%B0
	GetGroupAtAllRemain(ctx context.Context, in *GetGroupAtAllRemainRequest, opts ...grpc.CallOption) (*GetGroupAtAllRemainResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#set_friend_add_request-%E5%A4%84%E7%90%86%E5%8A%A0%E5%A5%BD%E5%8F%8B%E8%AF%B7%E6%B1%82
	ProcessFriendRequest(ctx context.Context, in *ProcessFriendRequestRequest, opts ...grpc.CallOption) (*ProcessFriendRequestResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#set_group_add_request-%E5%A4%84%E7%90%86%E5%8A%A0%E7%BE%A4%E8%AF%B7%E6%B1%82%E9%82%80%E8%AF%B7
	ProcessGroupRequest(ctx context.Context, in *ProcessGroupRequestRequest, opts ...grpc.CallOption) (*ProcessGroupRequestResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#delete_msg-%E6%92%A4%E5%9B%9E%E6%B6%88%E6%81%AF
	DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#set_group_admin-%E7%BE%A4%E7%BB%84%E8%AE%BE%E7%BD%AE%E7%AE%A1%E7%90%86%E5%91%98
	SetGroupAdmin(ctx context.Context, in *SetGroupAdminRequest, opts ...grpc.CallOption) (*SetGroupAdminResponse, error)
	// https://github.com/Mrs4s/go-cqhttp/blob/master/docs/cqhttp.md#%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7vip%E4%BF%A1%E6%81%AF
	GetVipInfo(ctx context.Context, in *GetVipInfoRequest, opts ...grpc.CallOption) (*GetVipInfoResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#get_group_honor_info-%E8%8E%B7%E5%8F%96%E7%BE%A4%E8%8D%A3%E8%AA%89%E4%BF%A1%E6%81%AF
	GetGroupHonorInfo(ctx context.Context, in *GetGroupHonorInfoRequest, opts ...grpc.CallOption) (*GetGroupHonorInfoResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#get_stranger_info-%E8%8E%B7%E5%8F%96%E9%99%8C%E7%94%9F%E4%BA%BA%E4%BF%A1%E6%81%AF
	GetStrangerInfo(ctx context.Context, in *GetStrangerInfoRequest, opts ...grpc.CallOption) (*GetStrangerInfoResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/hidden.md#handle_quick_operation-%E5%AF%B9%E4%BA%8B%E4%BB%B6%E6%89%A7%E8%A1%8C%E5%BF%AB%E9%80%9F%E6%93%8D%E4%BD%9C
	HandleQuickOperation(ctx context.Context, in *HandleQuickOperationRequest, opts ...grpc.CallOption) (*HandleQuickOperationResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#get_image-%E8%8E%B7%E5%8F%96%E5%9B%BE%E7%89%87
	GetImage(ctx context.Context, in *GetImageRequest, opts ...grpc.CallOption) (*GetImageResponse, error)
	// https://github.com/Mrs4s/go-cqhttp/blob/master/docs/cqhttp.md#%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E5%88%B0%E7%BC%93%E5%AD%98%E7%9B%AE%E5%BD%95
	DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (*DownloadFileResponse, error)
	// https://github.com/Mrs4s/go-cqhttp/blob/master/docs/cqhttp.md#%E8%8E%B7%E5%8F%96%E5%90%88%E5%B9%B6%E8%BD%AC%E5%8F%91%E5%86%85%E5%AE%B9
	GetForwardMessage(ctx context.Context, in *GetForwardMessageRequest, opts ...grpc.CallOption) (*GetForwardMessageResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#get_msg-%E8%8E%B7%E5%8F%96%E6%B6%88%E6%81%AF
	GetMessage(ctx context.Context, in *GetMessageRequest, opts ...grpc.CallOption) (*GetMessageResponse, error)
	// https://github.com/Mrs4s/go-cqhttp/blob/master/docs/cqhttp.md#%E8%8E%B7%E5%8F%96%E7%BE%A4%E7%B3%BB%E7%BB%9F%E6%B6%88%E6%81%AF
	GetGroupSystemMessage(ctx context.Context, in *GetGroupSystemMessageRequest, opts ...grpc.CallOption) (*GetGroupSystemMessageResponse, error)
	// https://github.com/Mrs4s/go-cqhttp/blob/master/docs/cqhttp.md#%E8%8E%B7%E5%8F%96%E7%BE%A4%E6%B6%88%E6%81%AF%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95
	GetGroupMessageHistory(ctx context.Context, in *GetGroupMessageHistoryRequest, opts ...grpc.CallOption) (*GetGroupMessageHistoryResponse, error)
	// https://github.com/Mrs4s/go-cqhttp/blob/master/docs/cqhttp.md#%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E8%B4%A6%E5%8F%B7%E5%9C%A8%E7%BA%BF%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%88%97%E8%A1%A8
	GetOnlineClients(ctx context.Context, in *GetOnlineClientsRequest, opts ...grpc.CallOption) (*GetOnlineClientsResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#can_send_image-%E6%A3%80%E6%9F%A5%E6%98%AF%E5%90%A6%E5%8F%AF%E4%BB%A5%E5%8F%91%E9%80%81%E5%9B%BE%E7%89%87
	CanSendImage(ctx context.Context, in *CanSendImageRequest, opts ...grpc.CallOption) (*CanSendImageResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#can_send_record-%E6%A3%80%E6%9F%A5%E6%98%AF%E5%90%A6%E5%8F%AF%E4%BB%A5%E5%8F%91%E9%80%81%E8%AF%AD%E9%9F%B3
	CanSendRecord(ctx context.Context, in *CanSendRecordRequest, opts ...grpc.CallOption) (*CanSendRecordResponse, error)
	// https://github.com/Mrs4s/go-cqhttp/blob/master/docs/cqhttp.md#%E5%9B%BE%E7%89%87ocr
	OcrImage(ctx context.Context, in *OcrImageRequest, opts ...grpc.CallOption) (*OcrImageResponse, error)
	// https://github.com/Mrs4s/go-cqhttp/blob/master/docs/cqhttp.md#%E9%87%8D%E8%BD%BD%E4%BA%8B%E4%BB%B6%E8%BF%87%E6%BB%A4%E5%99%A8
	ReloadEventFilter(ctx context.Context, in *ReloadEventFilterRequest, opts ...grpc.CallOption) (*ReloadEventFilterResponse, error)
	// https://github.com/Mrs4s/go-cqhttp/blob/master/docs/cqhttp.md#%E8%AE%BE%E7%BD%AE%E7%BE%A4%E5%A4%B4%E5%83%8F
	SetGroupPortrait(ctx context.Context, in *SetGroupPortraitRequest, opts ...grpc.CallOption) (*SetGroupPortraitResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#set_group_anonymous_ban-%E7%BE%A4%E7%BB%84%E5%8C%BF%E5%90%8D%E7%94%A8%E6%88%B7%E7%A6%81%E8%A8%80
	SetGroupAnonymousBan(ctx context.Context, in *SetGroupAnonymousBanRequest, opts ...grpc.CallOption) (*SetGroupAnonymousBanResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#get_status-%E8%8E%B7%E5%8F%96%E8%BF%90%E8%A1%8C%E7%8A%B6%E6%80%81
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#get_version_info-%E8%8E%B7%E5%8F%96%E7%89%88%E6%9C%AC%E4%BF%A1%E6%81%AF
	GetVersionInfo(ctx context.Context, in *GetVersionInfoRequest, opts ...grpc.CallOption) (*GetVersionInfoResponse, error)
	GetEvents(ctx context.Context, in *GetEventsResquest, opts ...grpc.CallOption) (API_GetEventsClient, error)
}

type aPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIClient(cc grpc.ClientConnInterface) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) GetLoginInfo(ctx context.Context, in *GetLoginInfoRequest, opts ...grpc.CallOption) (*GetLoginInfoResponse, error) {
	out := new(GetLoginInfoResponse)
	err := c.cc.Invoke(ctx, "/cq.API/GetLoginInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetFriendList(ctx context.Context, in *GetFriendListRequest, opts ...grpc.CallOption) (*GetFriendListResponse, error) {
	out := new(GetFriendListResponse)
	err := c.cc.Invoke(ctx, "/cq.API/GetFriendList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetGroupList(ctx context.Context, in *GetGroupListRequest, opts ...grpc.CallOption) (*GetGroupListResponse, error) {
	out := new(GetGroupListResponse)
	err := c.cc.Invoke(ctx, "/cq.API/GetGroupList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetGroupInfo(ctx context.Context, in *GetGroupInfoRequest, opts ...grpc.CallOption) (*GetGroupInfoResponse, error) {
	out := new(GetGroupInfoResponse)
	err := c.cc.Invoke(ctx, "/cq.API/GetGroupInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetGroupMemberList(ctx context.Context, in *GetGroupMemberListRequest, opts ...grpc.CallOption) (*GetGroupMemberListResponse, error) {
	out := new(GetGroupMemberListResponse)
	err := c.cc.Invoke(ctx, "/cq.API/GetGroupMemberList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetGroupMemberInfo(ctx context.Context, in *GetGroupMemberInfoRequest, opts ...grpc.CallOption) (*GetGroupMemberInfoResponse, error) {
	out := new(GetGroupMemberInfoResponse)
	err := c.cc.Invoke(ctx, "/cq.API/GetGroupMemberInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetGroupFileSystemInfo(ctx context.Context, in *GetGroupFileSystemInfoRequest, opts ...grpc.CallOption) (*GetGroupFileSystemInfoResponse, error) {
	out := new(GetGroupFileSystemInfoResponse)
	err := c.cc.Invoke(ctx, "/cq.API/GetGroupFileSystemInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetGroupRootFiles(ctx context.Context, in *GetGroupRootFilesRequest, opts ...grpc.CallOption) (*GetGroupRootFilesResponse, error) {
	out := new(GetGroupRootFilesResponse)
	err := c.cc.Invoke(ctx, "/cq.API/GetGroupRootFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetGroupFilesByFolder(ctx context.Context, in *GetGroupFilesByFolderRequest, opts ...grpc.CallOption) (*GetGroupFilesByFolderResponse, error) {
	out := new(GetGroupFilesByFolderResponse)
	err := c.cc.Invoke(ctx, "/cq.API/GetGroupFilesByFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetGroupFileUrl(ctx context.Context, in *GetGroupFileUrlRequest, opts ...grpc.CallOption) (*GetGroupFileUrlResponse, error) {
	out := new(GetGroupFileUrlResponse)
	err := c.cc.Invoke(ctx, "/cq.API/GetGroupFileUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetWordSlices(ctx context.Context, in *GetWordSlicesRequest, opts ...grpc.CallOption) (*GetWordSlicesResponse, error) {
	out := new(GetWordSlicesResponse)
	err := c.cc.Invoke(ctx, "/cq.API/GetWordSlices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SendGroupMessage(ctx context.Context, in *SendGroupMessageRequest, opts ...grpc.CallOption) (*SendGroupMessageResponse, error) {
	out := new(SendGroupMessageResponse)
	err := c.cc.Invoke(ctx, "/cq.API/SendGroupMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SendGroupForwardMessage(ctx context.Context, in *SendGroupForwardMessageRequest, opts ...grpc.CallOption) (*SendGroupForwardMessageResponse, error) {
	out := new(SendGroupForwardMessageResponse)
	err := c.cc.Invoke(ctx, "/cq.API/SendGroupForwardMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SendPrivateMessage(ctx context.Context, in *SendPrivateMessageRequest, opts ...grpc.CallOption) (*SendPrivateMessageResponse, error) {
	out := new(SendPrivateMessageResponse)
	err := c.cc.Invoke(ctx, "/cq.API/SendPrivateMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SetGroupCard(ctx context.Context, in *SetGroupCardRequest, opts ...grpc.CallOption) (*SetGroupCardResponse, error) {
	out := new(SetGroupCardResponse)
	err := c.cc.Invoke(ctx, "/cq.API/SetGroupCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SetGroupSpecialTitle(ctx context.Context, in *SetGroupSpecialTitleRequest, opts ...grpc.CallOption) (*SetGroupSpecialTitleResponse, error) {
	out := new(SetGroupSpecialTitleResponse)
	err := c.cc.Invoke(ctx, "/cq.API/SetGroupSpecialTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SetGroupName(ctx context.Context, in *SetGroupNameRequest, opts ...grpc.CallOption) (*SetGroupNameResponse, error) {
	out := new(SetGroupNameResponse)
	err := c.cc.Invoke(ctx, "/cq.API/SetGroupName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SetGroupNotice(ctx context.Context, in *SetGroupNoticeRequest, opts ...grpc.CallOption) (*SetGroupNoticeResponse, error) {
	out := new(SetGroupNoticeResponse)
	err := c.cc.Invoke(ctx, "/cq.API/SetGroupNotice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SetGroupKick(ctx context.Context, in *SetGroupKickRequest, opts ...grpc.CallOption) (*SetGroupKickResponse, error) {
	out := new(SetGroupKickResponse)
	err := c.cc.Invoke(ctx, "/cq.API/SetGroupKick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SetGroupBan(ctx context.Context, in *SetGroupBanRequest, opts ...grpc.CallOption) (*SetGroupBanResponse, error) {
	out := new(SetGroupBanResponse)
	err := c.cc.Invoke(ctx, "/cq.API/SetGroupBan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SetGroupWholeBan(ctx context.Context, in *SetGroupWholeBanRequest, opts ...grpc.CallOption) (*SetGroupWholeBanResponse, error) {
	out := new(SetGroupWholeBanResponse)
	err := c.cc.Invoke(ctx, "/cq.API/SetGroupWholeBan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SetGroupLeave(ctx context.Context, in *SetGroupLeaveRequest, opts ...grpc.CallOption) (*SetGroupLeaveResponse, error) {
	out := new(SetGroupLeaveResponse)
	err := c.cc.Invoke(ctx, "/cq.API/SetGroupLeave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetGroupAtAllRemain(ctx context.Context, in *GetGroupAtAllRemainRequest, opts ...grpc.CallOption) (*GetGroupAtAllRemainResponse, error) {
	out := new(GetGroupAtAllRemainResponse)
	err := c.cc.Invoke(ctx, "/cq.API/GetGroupAtAllRemain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ProcessFriendRequest(ctx context.Context, in *ProcessFriendRequestRequest, opts ...grpc.CallOption) (*ProcessFriendRequestResponse, error) {
	out := new(ProcessFriendRequestResponse)
	err := c.cc.Invoke(ctx, "/cq.API/ProcessFriendRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ProcessGroupRequest(ctx context.Context, in *ProcessGroupRequestRequest, opts ...grpc.CallOption) (*ProcessGroupRequestResponse, error) {
	out := new(ProcessGroupRequestResponse)
	err := c.cc.Invoke(ctx, "/cq.API/ProcessGroupRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageResponse, error) {
	out := new(DeleteMessageResponse)
	err := c.cc.Invoke(ctx, "/cq.API/DeleteMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SetGroupAdmin(ctx context.Context, in *SetGroupAdminRequest, opts ...grpc.CallOption) (*SetGroupAdminResponse, error) {
	out := new(SetGroupAdminResponse)
	err := c.cc.Invoke(ctx, "/cq.API/SetGroupAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetVipInfo(ctx context.Context, in *GetVipInfoRequest, opts ...grpc.CallOption) (*GetVipInfoResponse, error) {
	out := new(GetVipInfoResponse)
	err := c.cc.Invoke(ctx, "/cq.API/GetVipInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetGroupHonorInfo(ctx context.Context, in *GetGroupHonorInfoRequest, opts ...grpc.CallOption) (*GetGroupHonorInfoResponse, error) {
	out := new(GetGroupHonorInfoResponse)
	err := c.cc.Invoke(ctx, "/cq.API/GetGroupHonorInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetStrangerInfo(ctx context.Context, in *GetStrangerInfoRequest, opts ...grpc.CallOption) (*GetStrangerInfoResponse, error) {
	out := new(GetStrangerInfoResponse)
	err := c.cc.Invoke(ctx, "/cq.API/GetStrangerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) HandleQuickOperation(ctx context.Context, in *HandleQuickOperationRequest, opts ...grpc.CallOption) (*HandleQuickOperationResponse, error) {
	out := new(HandleQuickOperationResponse)
	err := c.cc.Invoke(ctx, "/cq.API/HandleQuickOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetImage(ctx context.Context, in *GetImageRequest, opts ...grpc.CallOption) (*GetImageResponse, error) {
	out := new(GetImageResponse)
	err := c.cc.Invoke(ctx, "/cq.API/GetImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (*DownloadFileResponse, error) {
	out := new(DownloadFileResponse)
	err := c.cc.Invoke(ctx, "/cq.API/DownloadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetForwardMessage(ctx context.Context, in *GetForwardMessageRequest, opts ...grpc.CallOption) (*GetForwardMessageResponse, error) {
	out := new(GetForwardMessageResponse)
	err := c.cc.Invoke(ctx, "/cq.API/GetForwardMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetMessage(ctx context.Context, in *GetMessageRequest, opts ...grpc.CallOption) (*GetMessageResponse, error) {
	out := new(GetMessageResponse)
	err := c.cc.Invoke(ctx, "/cq.API/GetMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetGroupSystemMessage(ctx context.Context, in *GetGroupSystemMessageRequest, opts ...grpc.CallOption) (*GetGroupSystemMessageResponse, error) {
	out := new(GetGroupSystemMessageResponse)
	err := c.cc.Invoke(ctx, "/cq.API/GetGroupSystemMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetGroupMessageHistory(ctx context.Context, in *GetGroupMessageHistoryRequest, opts ...grpc.CallOption) (*GetGroupMessageHistoryResponse, error) {
	out := new(GetGroupMessageHistoryResponse)
	err := c.cc.Invoke(ctx, "/cq.API/GetGroupMessageHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetOnlineClients(ctx context.Context, in *GetOnlineClientsRequest, opts ...grpc.CallOption) (*GetOnlineClientsResponse, error) {
	out := new(GetOnlineClientsResponse)
	err := c.cc.Invoke(ctx, "/cq.API/GetOnlineClients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CanSendImage(ctx context.Context, in *CanSendImageRequest, opts ...grpc.CallOption) (*CanSendImageResponse, error) {
	out := new(CanSendImageResponse)
	err := c.cc.Invoke(ctx, "/cq.API/CanSendImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CanSendRecord(ctx context.Context, in *CanSendRecordRequest, opts ...grpc.CallOption) (*CanSendRecordResponse, error) {
	out := new(CanSendRecordResponse)
	err := c.cc.Invoke(ctx, "/cq.API/CanSendRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) OcrImage(ctx context.Context, in *OcrImageRequest, opts ...grpc.CallOption) (*OcrImageResponse, error) {
	out := new(OcrImageResponse)
	err := c.cc.Invoke(ctx, "/cq.API/OcrImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ReloadEventFilter(ctx context.Context, in *ReloadEventFilterRequest, opts ...grpc.CallOption) (*ReloadEventFilterResponse, error) {
	out := new(ReloadEventFilterResponse)
	err := c.cc.Invoke(ctx, "/cq.API/ReloadEventFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SetGroupPortrait(ctx context.Context, in *SetGroupPortraitRequest, opts ...grpc.CallOption) (*SetGroupPortraitResponse, error) {
	out := new(SetGroupPortraitResponse)
	err := c.cc.Invoke(ctx, "/cq.API/SetGroupPortrait", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SetGroupAnonymousBan(ctx context.Context, in *SetGroupAnonymousBanRequest, opts ...grpc.CallOption) (*SetGroupAnonymousBanResponse, error) {
	out := new(SetGroupAnonymousBanResponse)
	err := c.cc.Invoke(ctx, "/cq.API/SetGroupAnonymousBan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error) {
	out := new(GetStatusResponse)
	err := c.cc.Invoke(ctx, "/cq.API/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetVersionInfo(ctx context.Context, in *GetVersionInfoRequest, opts ...grpc.CallOption) (*GetVersionInfoResponse, error) {
	out := new(GetVersionInfoResponse)
	err := c.cc.Invoke(ctx, "/cq.API/GetVersionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetEvents(ctx context.Context, in *GetEventsResquest, opts ...grpc.CallOption) (API_GetEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &API_ServiceDesc.Streams[0], "/cq.API/GetEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIGetEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_GetEventsClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type aPIGetEventsClient struct {
	grpc.ClientStream
}

func (x *aPIGetEventsClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// APIServer is the server API for API service.
// All implementations must embed UnimplementedAPIServer
// for forward compatibility
type APIServer interface {
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#get_login_info-%E8%8E%B7%E5%8F%96%E7%99%BB%E5%BD%95%E5%8F%B7%E4%BF%A1%E6%81%AF
	GetLoginInfo(context.Context, *GetLoginInfoRequest) (*GetLoginInfoResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#get_friend_list-%E8%8E%B7%E5%8F%96%E5%A5%BD%E5%8F%8B%E5%88%97%E8%A1%A8
	GetFriendList(context.Context, *GetFriendListRequest) (*GetFriendListResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#get_group_list-%E8%8E%B7%E5%8F%96%E7%BE%A4%E5%88%97%E8%A1%A8
	GetGroupList(context.Context, *GetGroupListRequest) (*GetGroupListResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#get_group_info-%E8%8E%B7%E5%8F%96%E7%BE%A4%E4%BF%A1%E6%81%AF
	GetGroupInfo(context.Context, *GetGroupInfoRequest) (*GetGroupInfoResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#get_group_member_list-%E8%8E%B7%E5%8F%96%E7%BE%A4%E6%88%90%E5%91%98%E5%88%97%E8%A1%A8
	GetGroupMemberList(context.Context, *GetGroupMemberListRequest) (*GetGroupMemberListResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#get_group_member_info-%E8%8E%B7%E5%8F%96%E7%BE%A4%E6%88%90%E5%91%98%E4%BF%A1%E6%81%AF
	GetGroupMemberInfo(context.Context, *GetGroupMemberInfoRequest) (*GetGroupMemberInfoResponse, error)
	// https://github.com/Mrs4s/go-cqhttp/blob/master/docs/cqhttp.md#%E8%8E%B7%E5%8F%96%E7%BE%A4%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF
	GetGroupFileSystemInfo(context.Context, *GetGroupFileSystemInfoRequest) (*GetGroupFileSystemInfoResponse, error)
	// https://github.com/Mrs4s/go-cqhttp/blob/master/docs/cqhttp.md#%E8%8E%B7%E5%8F%96%E7%BE%A4%E6%A0%B9%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6%E5%88%97%E8%A1%A8
	GetGroupRootFiles(context.Context, *GetGroupRootFilesRequest) (*GetGroupRootFilesResponse, error)
	// https://github.com/Mrs4s/go-cqhttp/blob/master/docs/cqhttp.md#%E8%8E%B7%E5%8F%96%E7%BE%A4%E5%AD%90%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6%E5%88%97%E8%A1%A8
	GetGroupFilesByFolder(context.Context, *GetGroupFilesByFolderRequest) (*GetGroupFilesByFolderResponse, error)
	// https://github.com/Mrs4s/go-cqhttp/blob/master/docs/cqhttp.md#%E8%8E%B7%E5%8F%96%E7%BE%A4%E6%96%87%E4%BB%B6%E8%B5%84%E6%BA%90%E9%93%BE%E6%8E%A5
	GetGroupFileUrl(context.Context, *GetGroupFileUrlRequest) (*GetGroupFileUrlResponse, error)
	// https://github.com/Mrs4s/go-cqhttp/blob/master/docs/cqhttp.md#%E8%8E%B7%E5%8F%96%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D
	GetWordSlices(context.Context, *GetWordSlicesRequest) (*GetWordSlicesResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#send_group_msg-%E5%8F%91%E9%80%81%E7%BE%A4%E6%B6%88%E6%81%AF
	SendGroupMessage(context.Context, *SendGroupMessageRequest) (*SendGroupMessageResponse, error)
	// https://github.com/Mrs4s/go-cqhttp/blob/master/docs/cqhttp.md#%E5%8F%91%E9%80%81%E5%90%88%E5%B9%B6%E8%BD%AC%E5%8F%91%E7%BE%A4
	SendGroupForwardMessage(context.Context, *SendGroupForwardMessageRequest) (*SendGroupForwardMessageResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#send_private_msg-%E5%8F%91%E9%80%81%E7%A7%81%E8%81%8A%E6%B6%88%E6%81%AF
	SendPrivateMessage(context.Context, *SendPrivateMessageRequest) (*SendPrivateMessageResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#set_group_card-%E8%AE%BE%E7%BD%AE%E7%BE%A4%E5%90%8D%E7%89%87%E7%BE%A4%E5%A4%87%E6%B3%A8
	SetGroupCard(context.Context, *SetGroupCardRequest) (*SetGroupCardResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#set_group_special_title-%E8%AE%BE%E7%BD%AE%E7%BE%A4%E7%BB%84%E4%B8%93%E5%B1%9E%E5%A4%B4%E8%A1%94
	SetGroupSpecialTitle(context.Context, *SetGroupSpecialTitleRequest) (*SetGroupSpecialTitleResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#set_group_name-%E8%AE%BE%E7%BD%AE%E7%BE%A4%E5%90%8D
	SetGroupName(context.Context, *SetGroupNameRequest) (*SetGroupNameResponse, error)
	// https://github.com/Mrs4s/go-cqhttp/blob/master/docs/cqhttp.md#%E5%8F%91%E9%80%81%E7%BE%A4%E5%85%AC%E5%91%8A
	SetGroupNotice(context.Context, *SetGroupNoticeRequest) (*SetGroupNoticeResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#set_group_kick-%E7%BE%A4%E7%BB%84%E8%B8%A2%E4%BA%BA
	SetGroupKick(context.Context, *SetGroupKickRequest) (*SetGroupKickResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#set_group_ban-%E7%BE%A4%E7%BB%84%E5%8D%95%E4%BA%BA%E7%A6%81%E8%A8%80
	SetGroupBan(context.Context, *SetGroupBanRequest) (*SetGroupBanResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#set_group_whole_ban-%E7%BE%A4%E7%BB%84%E5%85%A8%E5%91%98%E7%A6%81%E8%A8%80
	SetGroupWholeBan(context.Context, *SetGroupWholeBanRequest) (*SetGroupWholeBanResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#set_group_leave-%E9%80%80%E5%87%BA%E7%BE%A4%E7%BB%84
	SetGroupLeave(context.Context, *SetGroupLeaveRequest) (*SetGroupLeaveResponse, error)
	// https://github.com/Mrs4s/go-cqhttp/blob/master/docs/cqhttp.md#%E8%8E%B7%E5%8F%96%E7%BE%A4%E5%85%A8%E4%BD%93%E6%88%90%E5%91%98%E5%89%A9%E4%BD%99%E6%AC%A1%E6%95%B0
	GetGroupAtAllRemain(context.Context, *GetGroupAtAllRemainRequest) (*GetGroupAtAllRemainResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#set_friend_add_request-%E5%A4%84%E7%90%86%E5%8A%A0%E5%A5%BD%E5%8F%8B%E8%AF%B7%E6%B1%82
	ProcessFriendRequest(context.Context, *ProcessFriendRequestRequest) (*ProcessFriendRequestResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#set_group_add_request-%E5%A4%84%E7%90%86%E5%8A%A0%E7%BE%A4%E8%AF%B7%E6%B1%82%E9%82%80%E8%AF%B7
	ProcessGroupRequest(context.Context, *ProcessGroupRequestRequest) (*ProcessGroupRequestResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#delete_msg-%E6%92%A4%E5%9B%9E%E6%B6%88%E6%81%AF
	DeleteMessage(context.Context, *DeleteMessageRequest) (*DeleteMessageResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#set_group_admin-%E7%BE%A4%E7%BB%84%E8%AE%BE%E7%BD%AE%E7%AE%A1%E7%90%86%E5%91%98
	SetGroupAdmin(context.Context, *SetGroupAdminRequest) (*SetGroupAdminResponse, error)
	// https://github.com/Mrs4s/go-cqhttp/blob/master/docs/cqhttp.md#%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7vip%E4%BF%A1%E6%81%AF
	GetVipInfo(context.Context, *GetVipInfoRequest) (*GetVipInfoResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#get_group_honor_info-%E8%8E%B7%E5%8F%96%E7%BE%A4%E8%8D%A3%E8%AA%89%E4%BF%A1%E6%81%AF
	GetGroupHonorInfo(context.Context, *GetGroupHonorInfoRequest) (*GetGroupHonorInfoResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#get_stranger_info-%E8%8E%B7%E5%8F%96%E9%99%8C%E7%94%9F%E4%BA%BA%E4%BF%A1%E6%81%AF
	GetStrangerInfo(context.Context, *GetStrangerInfoRequest) (*GetStrangerInfoResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/hidden.md#handle_quick_operation-%E5%AF%B9%E4%BA%8B%E4%BB%B6%E6%89%A7%E8%A1%8C%E5%BF%AB%E9%80%9F%E6%93%8D%E4%BD%9C
	HandleQuickOperation(context.Context, *HandleQuickOperationRequest) (*HandleQuickOperationResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#get_image-%E8%8E%B7%E5%8F%96%E5%9B%BE%E7%89%87
	GetImage(context.Context, *GetImageRequest) (*GetImageResponse, error)
	// https://github.com/Mrs4s/go-cqhttp/blob/master/docs/cqhttp.md#%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E5%88%B0%E7%BC%93%E5%AD%98%E7%9B%AE%E5%BD%95
	DownloadFile(context.Context, *DownloadFileRequest) (*DownloadFileResponse, error)
	// https://github.com/Mrs4s/go-cqhttp/blob/master/docs/cqhttp.md#%E8%8E%B7%E5%8F%96%E5%90%88%E5%B9%B6%E8%BD%AC%E5%8F%91%E5%86%85%E5%AE%B9
	GetForwardMessage(context.Context, *GetForwardMessageRequest) (*GetForwardMessageResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#get_msg-%E8%8E%B7%E5%8F%96%E6%B6%88%E6%81%AF
	GetMessage(context.Context, *GetMessageRequest) (*GetMessageResponse, error)
	// https://github.com/Mrs4s/go-cqhttp/blob/master/docs/cqhttp.md#%E8%8E%B7%E5%8F%96%E7%BE%A4%E7%B3%BB%E7%BB%9F%E6%B6%88%E6%81%AF
	GetGroupSystemMessage(context.Context, *GetGroupSystemMessageRequest) (*GetGroupSystemMessageResponse, error)
	// https://github.com/Mrs4s/go-cqhttp/blob/master/docs/cqhttp.md#%E8%8E%B7%E5%8F%96%E7%BE%A4%E6%B6%88%E6%81%AF%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95
	GetGroupMessageHistory(context.Context, *GetGroupMessageHistoryRequest) (*GetGroupMessageHistoryResponse, error)
	// https://github.com/Mrs4s/go-cqhttp/blob/master/docs/cqhttp.md#%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E8%B4%A6%E5%8F%B7%E5%9C%A8%E7%BA%BF%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%88%97%E8%A1%A8
	GetOnlineClients(context.Context, *GetOnlineClientsRequest) (*GetOnlineClientsResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#can_send_image-%E6%A3%80%E6%9F%A5%E6%98%AF%E5%90%A6%E5%8F%AF%E4%BB%A5%E5%8F%91%E9%80%81%E5%9B%BE%E7%89%87
	CanSendImage(context.Context, *CanSendImageRequest) (*CanSendImageResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#can_send_record-%E6%A3%80%E6%9F%A5%E6%98%AF%E5%90%A6%E5%8F%AF%E4%BB%A5%E5%8F%91%E9%80%81%E8%AF%AD%E9%9F%B3
	CanSendRecord(context.Context, *CanSendRecordRequest) (*CanSendRecordResponse, error)
	// https://github.com/Mrs4s/go-cqhttp/blob/master/docs/cqhttp.md#%E5%9B%BE%E7%89%87ocr
	OcrImage(context.Context, *OcrImageRequest) (*OcrImageResponse, error)
	// https://github.com/Mrs4s/go-cqhttp/blob/master/docs/cqhttp.md#%E9%87%8D%E8%BD%BD%E4%BA%8B%E4%BB%B6%E8%BF%87%E6%BB%A4%E5%99%A8
	ReloadEventFilter(context.Context, *ReloadEventFilterRequest) (*ReloadEventFilterResponse, error)
	// https://github.com/Mrs4s/go-cqhttp/blob/master/docs/cqhttp.md#%E8%AE%BE%E7%BD%AE%E7%BE%A4%E5%A4%B4%E5%83%8F
	SetGroupPortrait(context.Context, *SetGroupPortraitRequest) (*SetGroupPortraitResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#set_group_anonymous_ban-%E7%BE%A4%E7%BB%84%E5%8C%BF%E5%90%8D%E7%94%A8%E6%88%B7%E7%A6%81%E8%A8%80
	SetGroupAnonymousBan(context.Context, *SetGroupAnonymousBanRequest) (*SetGroupAnonymousBanResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#get_status-%E8%8E%B7%E5%8F%96%E8%BF%90%E8%A1%8C%E7%8A%B6%E6%80%81
	GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error)
	// https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md#get_version_info-%E8%8E%B7%E5%8F%96%E7%89%88%E6%9C%AC%E4%BF%A1%E6%81%AF
	GetVersionInfo(context.Context, *GetVersionInfoRequest) (*GetVersionInfoResponse, error)
	GetEvents(*GetEventsResquest, API_GetEventsServer) error
	mustEmbedUnimplementedAPIServer()
}

// UnimplementedAPIServer must be embedded to have forward compatible implementations.
type UnimplementedAPIServer struct {
}

func (UnimplementedAPIServer) GetLoginInfo(context.Context, *GetLoginInfoRequest) (*GetLoginInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoginInfo not implemented")
}
func (UnimplementedAPIServer) GetFriendList(context.Context, *GetFriendListRequest) (*GetFriendListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendList not implemented")
}
func (UnimplementedAPIServer) GetGroupList(context.Context, *GetGroupListRequest) (*GetGroupListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupList not implemented")
}
func (UnimplementedAPIServer) GetGroupInfo(context.Context, *GetGroupInfoRequest) (*GetGroupInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupInfo not implemented")
}
func (UnimplementedAPIServer) GetGroupMemberList(context.Context, *GetGroupMemberListRequest) (*GetGroupMemberListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupMemberList not implemented")
}
func (UnimplementedAPIServer) GetGroupMemberInfo(context.Context, *GetGroupMemberInfoRequest) (*GetGroupMemberInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupMemberInfo not implemented")
}
func (UnimplementedAPIServer) GetGroupFileSystemInfo(context.Context, *GetGroupFileSystemInfoRequest) (*GetGroupFileSystemInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupFileSystemInfo not implemented")
}
func (UnimplementedAPIServer) GetGroupRootFiles(context.Context, *GetGroupRootFilesRequest) (*GetGroupRootFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupRootFiles not implemented")
}
func (UnimplementedAPIServer) GetGroupFilesByFolder(context.Context, *GetGroupFilesByFolderRequest) (*GetGroupFilesByFolderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupFilesByFolder not implemented")
}
func (UnimplementedAPIServer) GetGroupFileUrl(context.Context, *GetGroupFileUrlRequest) (*GetGroupFileUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupFileUrl not implemented")
}
func (UnimplementedAPIServer) GetWordSlices(context.Context, *GetWordSlicesRequest) (*GetWordSlicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWordSlices not implemented")
}
func (UnimplementedAPIServer) SendGroupMessage(context.Context, *SendGroupMessageRequest) (*SendGroupMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendGroupMessage not implemented")
}
func (UnimplementedAPIServer) SendGroupForwardMessage(context.Context, *SendGroupForwardMessageRequest) (*SendGroupForwardMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendGroupForwardMessage not implemented")
}
func (UnimplementedAPIServer) SendPrivateMessage(context.Context, *SendPrivateMessageRequest) (*SendPrivateMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPrivateMessage not implemented")
}
func (UnimplementedAPIServer) SetGroupCard(context.Context, *SetGroupCardRequest) (*SetGroupCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroupCard not implemented")
}
func (UnimplementedAPIServer) SetGroupSpecialTitle(context.Context, *SetGroupSpecialTitleRequest) (*SetGroupSpecialTitleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroupSpecialTitle not implemented")
}
func (UnimplementedAPIServer) SetGroupName(context.Context, *SetGroupNameRequest) (*SetGroupNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroupName not implemented")
}
func (UnimplementedAPIServer) SetGroupNotice(context.Context, *SetGroupNoticeRequest) (*SetGroupNoticeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroupNotice not implemented")
}
func (UnimplementedAPIServer) SetGroupKick(context.Context, *SetGroupKickRequest) (*SetGroupKickResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroupKick not implemented")
}
func (UnimplementedAPIServer) SetGroupBan(context.Context, *SetGroupBanRequest) (*SetGroupBanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroupBan not implemented")
}
func (UnimplementedAPIServer) SetGroupWholeBan(context.Context, *SetGroupWholeBanRequest) (*SetGroupWholeBanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroupWholeBan not implemented")
}
func (UnimplementedAPIServer) SetGroupLeave(context.Context, *SetGroupLeaveRequest) (*SetGroupLeaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroupLeave not implemented")
}
func (UnimplementedAPIServer) GetGroupAtAllRemain(context.Context, *GetGroupAtAllRemainRequest) (*GetGroupAtAllRemainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupAtAllRemain not implemented")
}
func (UnimplementedAPIServer) ProcessFriendRequest(context.Context, *ProcessFriendRequestRequest) (*ProcessFriendRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessFriendRequest not implemented")
}
func (UnimplementedAPIServer) ProcessGroupRequest(context.Context, *ProcessGroupRequestRequest) (*ProcessGroupRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessGroupRequest not implemented")
}
func (UnimplementedAPIServer) DeleteMessage(context.Context, *DeleteMessageRequest) (*DeleteMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}
func (UnimplementedAPIServer) SetGroupAdmin(context.Context, *SetGroupAdminRequest) (*SetGroupAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroupAdmin not implemented")
}
func (UnimplementedAPIServer) GetVipInfo(context.Context, *GetVipInfoRequest) (*GetVipInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVipInfo not implemented")
}
func (UnimplementedAPIServer) GetGroupHonorInfo(context.Context, *GetGroupHonorInfoRequest) (*GetGroupHonorInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupHonorInfo not implemented")
}
func (UnimplementedAPIServer) GetStrangerInfo(context.Context, *GetStrangerInfoRequest) (*GetStrangerInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStrangerInfo not implemented")
}
func (UnimplementedAPIServer) HandleQuickOperation(context.Context, *HandleQuickOperationRequest) (*HandleQuickOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleQuickOperation not implemented")
}
func (UnimplementedAPIServer) GetImage(context.Context, *GetImageRequest) (*GetImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImage not implemented")
}
func (UnimplementedAPIServer) DownloadFile(context.Context, *DownloadFileRequest) (*DownloadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedAPIServer) GetForwardMessage(context.Context, *GetForwardMessageRequest) (*GetForwardMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForwardMessage not implemented")
}
func (UnimplementedAPIServer) GetMessage(context.Context, *GetMessageRequest) (*GetMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessage not implemented")
}
func (UnimplementedAPIServer) GetGroupSystemMessage(context.Context, *GetGroupSystemMessageRequest) (*GetGroupSystemMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupSystemMessage not implemented")
}
func (UnimplementedAPIServer) GetGroupMessageHistory(context.Context, *GetGroupMessageHistoryRequest) (*GetGroupMessageHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupMessageHistory not implemented")
}
func (UnimplementedAPIServer) GetOnlineClients(context.Context, *GetOnlineClientsRequest) (*GetOnlineClientsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOnlineClients not implemented")
}
func (UnimplementedAPIServer) CanSendImage(context.Context, *CanSendImageRequest) (*CanSendImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanSendImage not implemented")
}
func (UnimplementedAPIServer) CanSendRecord(context.Context, *CanSendRecordRequest) (*CanSendRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanSendRecord not implemented")
}
func (UnimplementedAPIServer) OcrImage(context.Context, *OcrImageRequest) (*OcrImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OcrImage not implemented")
}
func (UnimplementedAPIServer) ReloadEventFilter(context.Context, *ReloadEventFilterRequest) (*ReloadEventFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReloadEventFilter not implemented")
}
func (UnimplementedAPIServer) SetGroupPortrait(context.Context, *SetGroupPortraitRequest) (*SetGroupPortraitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroupPortrait not implemented")
}
func (UnimplementedAPIServer) SetGroupAnonymousBan(context.Context, *SetGroupAnonymousBanRequest) (*SetGroupAnonymousBanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroupAnonymousBan not implemented")
}
func (UnimplementedAPIServer) GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedAPIServer) GetVersionInfo(context.Context, *GetVersionInfoRequest) (*GetVersionInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersionInfo not implemented")
}
func (UnimplementedAPIServer) GetEvents(*GetEventsResquest, API_GetEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetEvents not implemented")
}
func (UnimplementedAPIServer) mustEmbedUnimplementedAPIServer() {}

// UnsafeAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIServer will
// result in compilation errors.
type UnsafeAPIServer interface {
	mustEmbedUnimplementedAPIServer()
}

func RegisterAPIServer(s grpc.ServiceRegistrar, srv APIServer) {
	s.RegisterService(&API_ServiceDesc, srv)
}

func _API_GetLoginInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoginInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetLoginInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cq.API/GetLoginInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetLoginInfo(ctx, req.(*GetLoginInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetFriendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetFriendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cq.API/GetFriendList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetFriendList(ctx, req.(*GetFriendListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cq.API/GetGroupList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetGroupList(ctx, req.(*GetGroupListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetGroupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetGroupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cq.API/GetGroupInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetGroupInfo(ctx, req.(*GetGroupInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetGroupMemberList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupMemberListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetGroupMemberList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cq.API/GetGroupMemberList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetGroupMemberList(ctx, req.(*GetGroupMemberListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetGroupMemberInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupMemberInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetGroupMemberInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cq.API/GetGroupMemberInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetGroupMemberInfo(ctx, req.(*GetGroupMemberInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetGroupFileSystemInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupFileSystemInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetGroupFileSystemInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cq.API/GetGroupFileSystemInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetGroupFileSystemInfo(ctx, req.(*GetGroupFileSystemInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetGroupRootFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupRootFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetGroupRootFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cq.API/GetGroupRootFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetGroupRootFiles(ctx, req.(*GetGroupRootFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetGroupFilesByFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupFilesByFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetGroupFilesByFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cq.API/GetGroupFilesByFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetGroupFilesByFolder(ctx, req.(*GetGroupFilesByFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetGroupFileUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupFileUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetGroupFileUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cq.API/GetGroupFileUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetGroupFileUrl(ctx, req.(*GetGroupFileUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetWordSlices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWordSlicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetWordSlices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cq.API/GetWordSlices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetWordSlices(ctx, req.(*GetWordSlicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SendGroupMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendGroupMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).SendGroupMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cq.API/SendGroupMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).SendGroupMessage(ctx, req.(*SendGroupMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SendGroupForwardMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendGroupForwardMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).SendGroupForwardMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cq.API/SendGroupForwardMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).SendGroupForwardMessage(ctx, req.(*SendGroupForwardMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SendPrivateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPrivateMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).SendPrivateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cq.API/SendPrivateMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).SendPrivateMessage(ctx, req.(*SendPrivateMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SetGroupCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).SetGroupCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cq.API/SetGroupCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).SetGroupCard(ctx, req.(*SetGroupCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SetGroupSpecialTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupSpecialTitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).SetGroupSpecialTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cq.API/SetGroupSpecialTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).SetGroupSpecialTitle(ctx, req.(*SetGroupSpecialTitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SetGroupName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).SetGroupName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cq.API/SetGroupName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).SetGroupName(ctx, req.(*SetGroupNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SetGroupNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).SetGroupNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cq.API/SetGroupNotice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).SetGroupNotice(ctx, req.(*SetGroupNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SetGroupKick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupKickRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).SetGroupKick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cq.API/SetGroupKick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).SetGroupKick(ctx, req.(*SetGroupKickRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SetGroupBan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupBanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).SetGroupBan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cq.API/SetGroupBan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).SetGroupBan(ctx, req.(*SetGroupBanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SetGroupWholeBan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupWholeBanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).SetGroupWholeBan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cq.API/SetGroupWholeBan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).SetGroupWholeBan(ctx, req.(*SetGroupWholeBanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SetGroupLeave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupLeaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).SetGroupLeave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cq.API/SetGroupLeave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).SetGroupLeave(ctx, req.(*SetGroupLeaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetGroupAtAllRemain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupAtAllRemainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetGroupAtAllRemain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cq.API/GetGroupAtAllRemain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetGroupAtAllRemain(ctx, req.(*GetGroupAtAllRemainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ProcessFriendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessFriendRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ProcessFriendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cq.API/ProcessFriendRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ProcessFriendRequest(ctx, req.(*ProcessFriendRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ProcessGroupRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessGroupRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ProcessGroupRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cq.API/ProcessGroupRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ProcessGroupRequest(ctx, req.(*ProcessGroupRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cq.API/DeleteMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteMessage(ctx, req.(*DeleteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SetGroupAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).SetGroupAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cq.API/SetGroupAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).SetGroupAdmin(ctx, req.(*SetGroupAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetVipInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVipInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetVipInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cq.API/GetVipInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetVipInfo(ctx, req.(*GetVipInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetGroupHonorInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupHonorInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetGroupHonorInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cq.API/GetGroupHonorInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetGroupHonorInfo(ctx, req.(*GetGroupHonorInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetStrangerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStrangerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetStrangerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cq.API/GetStrangerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetStrangerInfo(ctx, req.(*GetStrangerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_HandleQuickOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleQuickOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).HandleQuickOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cq.API/HandleQuickOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).HandleQuickOperation(ctx, req.(*HandleQuickOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cq.API/GetImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetImage(ctx, req.(*GetImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DownloadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DownloadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cq.API/DownloadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DownloadFile(ctx, req.(*DownloadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetForwardMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetForwardMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetForwardMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cq.API/GetForwardMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetForwardMessage(ctx, req.(*GetForwardMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cq.API/GetMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetMessage(ctx, req.(*GetMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetGroupSystemMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupSystemMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetGroupSystemMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cq.API/GetGroupSystemMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetGroupSystemMessage(ctx, req.(*GetGroupSystemMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetGroupMessageHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupMessageHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetGroupMessageHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cq.API/GetGroupMessageHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetGroupMessageHistory(ctx, req.(*GetGroupMessageHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetOnlineClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOnlineClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetOnlineClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cq.API/GetOnlineClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetOnlineClients(ctx, req.(*GetOnlineClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CanSendImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanSendImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CanSendImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cq.API/CanSendImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CanSendImage(ctx, req.(*CanSendImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CanSendRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanSendRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CanSendRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cq.API/CanSendRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CanSendRecord(ctx, req.(*CanSendRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_OcrImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OcrImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).OcrImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cq.API/OcrImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).OcrImage(ctx, req.(*OcrImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ReloadEventFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReloadEventFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ReloadEventFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cq.API/ReloadEventFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ReloadEventFilter(ctx, req.(*ReloadEventFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SetGroupPortrait_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupPortraitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).SetGroupPortrait(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cq.API/SetGroupPortrait",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).SetGroupPortrait(ctx, req.(*SetGroupPortraitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SetGroupAnonymousBan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupAnonymousBanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).SetGroupAnonymousBan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cq.API/SetGroupAnonymousBan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).SetGroupAnonymousBan(ctx, req.(*SetGroupAnonymousBanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cq.API/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetStatus(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetVersionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetVersionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cq.API/GetVersionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetVersionInfo(ctx, req.(*GetVersionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetEventsResquest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).GetEvents(m, &aPIGetEventsServer{stream})
}

type API_GetEventsServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type aPIGetEventsServer struct {
	grpc.ServerStream
}

func (x *aPIGetEventsServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

// API_ServiceDesc is the grpc.ServiceDesc for API service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var API_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cq.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLoginInfo",
			Handler:    _API_GetLoginInfo_Handler,
		},
		{
			MethodName: "GetFriendList",
			Handler:    _API_GetFriendList_Handler,
		},
		{
			MethodName: "GetGroupList",
			Handler:    _API_GetGroupList_Handler,
		},
		{
			MethodName: "GetGroupInfo",
			Handler:    _API_GetGroupInfo_Handler,
		},
		{
			MethodName: "GetGroupMemberList",
			Handler:    _API_GetGroupMemberList_Handler,
		},
		{
			MethodName: "GetGroupMemberInfo",
			Handler:    _API_GetGroupMemberInfo_Handler,
		},
		{
			MethodName: "GetGroupFileSystemInfo",
			Handler:    _API_GetGroupFileSystemInfo_Handler,
		},
		{
			MethodName: "GetGroupRootFiles",
			Handler:    _API_GetGroupRootFiles_Handler,
		},
		{
			MethodName: "GetGroupFilesByFolder",
			Handler:    _API_GetGroupFilesByFolder_Handler,
		},
		{
			MethodName: "GetGroupFileUrl",
			Handler:    _API_GetGroupFileUrl_Handler,
		},
		{
			MethodName: "GetWordSlices",
			Handler:    _API_GetWordSlices_Handler,
		},
		{
			MethodName: "SendGroupMessage",
			Handler:    _API_SendGroupMessage_Handler,
		},
		{
			MethodName: "SendGroupForwardMessage",
			Handler:    _API_SendGroupForwardMessage_Handler,
		},
		{
			MethodName: "SendPrivateMessage",
			Handler:    _API_SendPrivateMessage_Handler,
		},
		{
			MethodName: "SetGroupCard",
			Handler:    _API_SetGroupCard_Handler,
		},
		{
			MethodName: "SetGroupSpecialTitle",
			Handler:    _API_SetGroupSpecialTitle_Handler,
		},
		{
			MethodName: "SetGroupName",
			Handler:    _API_SetGroupName_Handler,
		},
		{
			MethodName: "SetGroupNotice",
			Handler:    _API_SetGroupNotice_Handler,
		},
		{
			MethodName: "SetGroupKick",
			Handler:    _API_SetGroupKick_Handler,
		},
		{
			MethodName: "SetGroupBan",
			Handler:    _API_SetGroupBan_Handler,
		},
		{
			MethodName: "SetGroupWholeBan",
			Handler:    _API_SetGroupWholeBan_Handler,
		},
		{
			MethodName: "SetGroupLeave",
			Handler:    _API_SetGroupLeave_Handler,
		},
		{
			MethodName: "GetGroupAtAllRemain",
			Handler:    _API_GetGroupAtAllRemain_Handler,
		},
		{
			MethodName: "ProcessFriendRequest",
			Handler:    _API_ProcessFriendRequest_Handler,
		},
		{
			MethodName: "ProcessGroupRequest",
			Handler:    _API_ProcessGroupRequest_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _API_DeleteMessage_Handler,
		},
		{
			MethodName: "SetGroupAdmin",
			Handler:    _API_SetGroupAdmin_Handler,
		},
		{
			MethodName: "GetVipInfo",
			Handler:    _API_GetVipInfo_Handler,
		},
		{
			MethodName: "GetGroupHonorInfo",
			Handler:    _API_GetGroupHonorInfo_Handler,
		},
		{
			MethodName: "GetStrangerInfo",
			Handler:    _API_GetStrangerInfo_Handler,
		},
		{
			MethodName: "HandleQuickOperation",
			Handler:    _API_HandleQuickOperation_Handler,
		},
		{
			MethodName: "GetImage",
			Handler:    _API_GetImage_Handler,
		},
		{
			MethodName: "DownloadFile",
			Handler:    _API_DownloadFile_Handler,
		},
		{
			MethodName: "GetForwardMessage",
			Handler:    _API_GetForwardMessage_Handler,
		},
		{
			MethodName: "GetMessage",
			Handler:    _API_GetMessage_Handler,
		},
		{
			MethodName: "GetGroupSystemMessage",
			Handler:    _API_GetGroupSystemMessage_Handler,
		},
		{
			MethodName: "GetGroupMessageHistory",
			Handler:    _API_GetGroupMessageHistory_Handler,
		},
		{
			MethodName: "GetOnlineClients",
			Handler:    _API_GetOnlineClients_Handler,
		},
		{
			MethodName: "CanSendImage",
			Handler:    _API_CanSendImage_Handler,
		},
		{
			MethodName: "CanSendRecord",
			Handler:    _API_CanSendRecord_Handler,
		},
		{
			MethodName: "OcrImage",
			Handler:    _API_OcrImage_Handler,
		},
		{
			MethodName: "ReloadEventFilter",
			Handler:    _API_ReloadEventFilter_Handler,
		},
		{
			MethodName: "SetGroupPortrait",
			Handler:    _API_SetGroupPortrait_Handler,
		},
		{
			MethodName: "SetGroupAnonymousBan",
			Handler:    _API_SetGroupAnonymousBan_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _API_GetStatus_Handler,
		},
		{
			MethodName: "GetVersionInfo",
			Handler:    _API_GetVersionInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetEvents",
			Handler:       _API_GetEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/cq.proto",
}
